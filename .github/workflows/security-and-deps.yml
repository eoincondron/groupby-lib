name: Security & Dependencies

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/security-and-deps.yml'
  pull_request:
    paths:
      - 'pyproject.toml'
      - 'requirements*.txt'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -e .[dev,test]
    
    - name: Run safety check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
    
    - name: Run bandit security linter
      run: |
        bandit -r kungfu_pandas/ -f json -o bandit-report.json || true
        bandit -r kungfu_pandas/ -ll
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint
        pip install -e .[dev]
    
    - name: Check code formatting with black
      run: |
        black --check --diff kungfu_pandas/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff kungfu_pandas/ tests/
    
    - name: Run flake8 linting
      run: |
        flake8 kungfu_pandas/ tests/ --statistics
    
    - name: Run mypy type checking
      run: |
        mypy kungfu_pandas/ --ignore-missing-imports --show-error-codes
    
    - name: Run pylint
      run: |
        pylint kungfu_pandas/ --rcfile=.pylintrc || true

  dependency-update:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip pip-tools
    
    - name: Check for outdated packages
      run: |
        pip install -e .[dev,test]
        pip list --outdated --format=json > outdated-packages.json
        
        echo "=== Outdated Packages ==="
        pip list --outdated
        
        # Check if critical dependencies need updates
        CRITICAL_DEPS="numpy pandas numba polars pyarrow"
        
        echo ""
        echo "=== Critical Dependencies Status ==="
        for dep in $CRITICAL_DEPS; do
          echo "Checking $dep..."
          pip show $dep | grep Version || echo "$dep not installed"
        done
    
    - name: Upload outdated packages report
      uses: actions/upload-artifact@v
      with:
        name: outdated-packages
        path: outdated-packages.json
        retention-days: 7

  compatibility-matrix:
    name: Test Compatibility Matrix
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[compat]')
    strategy:
      fail-fast: false
      matrix:
        # Test with minimum and latest versions of key dependencies
        deps_version:
          - minimal  # Minimum supported versions
          - latest   # Latest available versions
        python-version: ['3.10', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        if [[ "${{ matrix.deps_version }}" == "minimal" ]]; then
          # Install minimum supported versions
          pip install \
            "numpy==1.19.0" \
            "pandas==1.3.0" \
            "numba==0.56.0" \
            "polars==0.15.0" \
            "pyarrow==1.0.0"
        else
          # Install latest versions
          pip install numpy pandas numba polars pyarrow
        fi
        
        pip install pytest pytest-xdist
        pip install -e . --no-deps
    
    - name: Test core functionality
      run: |
        python -c "
        import sys
        print(f'Python: {sys.version}')
        
        import numpy as np
        import pandas as pd  
        import numba as nb
        import polars as pl
        import pyarrow as pa
        
        print(f'NumPy: {np.__version__}')
        print(f'Pandas: {pd.__version__}')
        print(f'Numba: {nb.__version__}')
        print(f'Polars: {pl.__version__}')
        print(f'PyArrow: {pa.__version__}')
        
        # Test basic functionality
        from kungfu_pandas.groupby import GroupBy
        gb = GroupBy(pd.Series([0,0,1,1]))
        result = gb.sum(pd.Series([1,2,3,4]))
        assert len(result) == 2
        print('Basic functionality test passed!')
        "
    
    - name: Run core tests
      run: |
        pytest tests/test_groupby/test_core.py -v --tb=short